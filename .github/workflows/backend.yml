name: Backend CI/CD

on:
  push:
    branches: [main, develop]
    paths: ['src/backend/**']
  pull_request:
    branches: [main, develop]
    paths: ['src/backend/**']

env:
  NODE_ENV: production
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  AWS_REGION: us-east-1

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: src/backend/package-lock.json

      - name: Install dependencies
        working-directory: src/backend
        run: npm ci

      - name: Run linting
        working-directory: src/backend
        run: npm run lint

      - name: Run type checking
        working-directory: src/backend
        run: npm run typecheck

      - name: Run unit tests
        working-directory: src/backend
        run: npm run test
        env:
          CI: true

      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: src/backend/coverage/
          retention-days: 14

  build:
    name: Build and Push
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: src/backend
          file: src/backend/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/backend:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/backend:latest
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.repository.updated_at }}

      - name: Scan for vulnerabilities
        uses: aquasecurity/trivy-action@v0.10.0
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/backend:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'

  deploy:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: https://api.smartapparel.com
    concurrency: 
      group: production
      cancel-in-progress: false
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update EKS deployment
        run: |
          aws eks update-kubeconfig --name smart-apparel-cluster
          kubectl set image deployment/backend \
            backend=${{ env.DOCKER_REGISTRY }}/backend:${{ github.sha }} \
            --record

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/backend -n production --timeout=300s

      - name: Run smoke tests
        run: |
          curl -f https://api.smartapparel.com/health || exit 1
          curl -f https://api.smartapparel.com/metrics || exit 1

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}