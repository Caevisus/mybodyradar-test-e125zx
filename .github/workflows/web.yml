name: Web Frontend CI/CD

on:
  push:
    branches: [main]
    paths: ['src/web/**']
  pull_request:
    branches: [main]
    paths: ['src/web/**']

env:
  NODE_VERSION: '18.x'
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  IMAGE_NAME: smart-apparel/web

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: src/web/package-lock.json

      - name: Install dependencies
        working-directory: src/web
        run: npm ci

      - name: Type checking
        working-directory: src/web
        run: npm run type-check

      - name: Lint code
        working-directory: src/web
        run: npm run lint

      - name: Run unit tests
        working-directory: src/web
        run: npm run test:coverage
        env:
          CI: true

      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: src/web/coverage

  security-scan:
    name: Security Analysis
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run npm audit
        working-directory: src/web
        run: npm audit --production

      - name: Run SAST scan
        uses: github/codeql-action/analyze@v2
        with:
          languages: javascript
          queries: security-extended

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: results

  build-container:
    name: Build Container
    needs: security-scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: --debug

      - name: Login to Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: src/web
          file: src/web/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          build-args: |
            BUILD_VERSION=${{ github.sha }}
          labels: |
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}

  deploy:
    name: Deploy
    needs: build-container
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name smart-apparel-cluster

      - name: Deploy to EKS
        id: deploy
        run: |
          kubectl set image deployment/web-frontend \
            web=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --record

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/web-frontend -n production --timeout=300s

      - name: Health check
        run: |
          ENDPOINT=$(kubectl get service web-frontend -n production -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
          for i in {1..30}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://${ENDPOINT}/health)
            if [ $STATUS -eq 200 ]; then
              echo "::set-output name=url::https://${ENDPOINT}"
              exit 0
            fi
            sleep 10
          done
          echo "Health check failed after 5 minutes"
          kubectl rollout undo deployment/web-frontend -n production
          exit 1

      - name: Notify deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}