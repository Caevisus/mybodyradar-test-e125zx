---
apiVersion: v1
kind: Service
metadata:
  name: kafka-broker
  namespace: backend
  labels:
    app: kafka
    component: broker
    part-of: smart-apparel
spec:
  type: ClusterIP
  ports:
    - name: broker
      port: 9092
      targetPort: 9092
    - name: external
      port: 9093
      targetPort: 9093
    - name: metrics
      port: 9308
      targetPort: 9308
  selector:
    app: kafka
    component: broker
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-config
  namespace: backend
data:
  server.properties: |
    broker.id.generation.enable=true
    delete.topic.enable=true
    auto.create.topics.enable=false
    default.replication.factor=3
    min.insync.replicas=2
    num.partitions=12
    log.retention.hours=168
    compression.type=lz4
    message.max.bytes=1048576
    replica.fetch.max.bytes=1048576
    num.network.threads=8
    num.io.threads=16
    socket.send.buffer.bytes=102400
    socket.receive.buffer.bytes=102400
    socket.request.max.bytes=104857600
    num.recovery.threads.per.data.dir=1
    offsets.topic.replication.factor=3
    transaction.state.log.replication.factor=3
    transaction.state.log.min.isr=2
    log.flush.interval.messages=10000
    log.flush.interval.ms=1000
    log.retention.check.interval.ms=300000
    zookeeper.connection.timeout.ms=18000
    group.initial.rebalance.delay.ms=3000

  jvm.options: |
    -Xms4g
    -Xmx4g
    -XX:+UseG1GC
    -XX:MaxGCPauseMillis=20
    -XX:InitiatingHeapOccupancyPercent=35
    -XX:+ExplicitGCInvokesConcurrent
    -XX:MaxInlineLevel=15
    -Djava.security.auth.login.config=/etc/kafka/secrets/jaas.conf
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka-broker
  namespace: backend
  labels:
    app: kafka
    component: broker
    part-of: smart-apparel
spec:
  serviceName: kafka-broker
  replicas: 3
  selector:
    matchLabels:
      app: kafka
      component: broker
  template:
    metadata:
      labels:
        app: kafka
        component: broker
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9308"
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      terminationGracePeriodSeconds: 300
      containers:
      - name: kafka
        image: confluentinc/cp-kafka:7.4.0
        ports:
        - containerPort: 9092
          name: broker
        - containerPort: 9093
          name: external
        - containerPort: 9308
          name: metrics
        resources:
          requests:
            cpu: "2"
            memory: "4Gi"
          limits:
            cpu: "4"
            memory: "8Gi"
        env:
        - name: KAFKA_BROKER_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "zookeeper:2181"
        - name: KAFKA_LISTENERS
          value: "INTERNAL://:9092,EXTERNAL://:9093"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "INTERNAL://$(POD_NAME).kafka-broker.backend.svc.cluster.local:9092,EXTERNAL://$(POD_NAME).kafka-broker.backend.svc.cluster.local:9093"
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: "INTERNAL:SASL_SSL,EXTERNAL:SASL_SSL"
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: "INTERNAL"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        volumeMounts:
        - name: kafka-data
          mountPath: /var/lib/kafka/data
        - name: kafka-config
          mountPath: /etc/kafka/server.properties
          subPath: server.properties
        - name: kafka-config
          mountPath: /etc/kafka/jvm.options
          subPath: jvm.options
        - name: kafka-secrets
          mountPath: /etc/kafka/secrets
      volumes:
      - name: kafka-config
        configMap:
          name: kafka-config
      - name: kafka-secrets
        secret:
          secretName: kafka-secrets
  volumeClaimTemplates:
  - metadata:
      name: kafka-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: high-performance
      resources:
        requests:
          storage: 100Gi
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: kafka-network-policy
  namespace: backend
spec:
  podSelector:
    matchLabels:
      app: kafka
      component: broker
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: backend
    ports:
    - protocol: TCP
      port: 9092
    - protocol: TCP
      port: 9093
    - protocol: TCP
      port: 9308
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090