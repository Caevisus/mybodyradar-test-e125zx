#!/usr/bin/env sh

# Gradle wrapper script with enhanced security and error handling
# Version: 1.0
# Requires: Java 8+, Unix-like environment

##############################################################################
# Script initialization and error handling
##############################################################################

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

APP_HOME=$( cd "${APP_HOME:-./}" && pwd -P )
APP_BASE_NAME=${0##*/}

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m" "-XX:+UseG1GC" "-Dfile.encoding=UTF-8"'

# Use the maximum available, or set MAX_FD != -1 to use that value
MAX_FD=maximum

# Security settings
GRADLE_WRAPPER_JAR="$APP_HOME/gradle/wrapper/gradle-wrapper.jar"
GRADLE_WRAPPER_PROPERTIES="$APP_HOME/gradle/wrapper/gradle-wrapper.properties"
GRADLE_WRAPPER_CHECKSUM="$APP_HOME/gradle/wrapper/gradle-wrapper.jar.sha256"

##############################################################################
# Functions
##############################################################################

warn() {
    echo "$*" >&2
}

die() {
    echo "ERROR: $1" >&2
    exit "$2"
}

# Validate Java installation and environment
init() {
    # Validate Java installation
    if [ -n "$JAVA_HOME" ] ; then
        if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
            JAVACMD=$JAVA_HOME/jre/sh/java
        else
            JAVACMD=$JAVA_HOME/bin/java
        fi
        if [ ! -x "$JAVACMD" ] ; then
            die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation." 2
        fi
    else
        JAVACMD=java
        which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation." 2
    fi

    # Validate maximum file descriptor limit
    if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
        MAX_FD_LIMIT=$( ulimit -H -n )
        if [ $? -eq 0 ] ; then
            if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
                MAX_FD="$MAX_FD_LIMIT"
            fi
            ulimit -n "$MAX_FD" || warn "Could not set maximum file descriptor limit to $MAX_FD"
        else
            warn "Could not query maximum file descriptor limit"
        fi
    fi

    # Verify Gradle wrapper JAR exists and checksum
    if [ ! -f "$GRADLE_WRAPPER_JAR" ]; then
        die "Could not find Gradle wrapper JAR: $GRADLE_WRAPPER_JAR" 3
    fi

    if [ -f "$GRADLE_WRAPPER_CHECKSUM" ]; then
        expected_checksum=$(cat "$GRADLE_WRAPPER_CHECKSUM")
        actual_checksum=$(sha256sum "$GRADLE_WRAPPER_JAR" | cut -d' ' -f1)
        if [ "$expected_checksum" != "$actual_checksum" ]; then
            die "Gradle wrapper JAR checksum verification failed" 4
        fi
    fi
}

# OS specific support
case "$( uname )" in
    CYGWIN* )
        cygwin=true
        ;;
    Darwin* )
        darwin=true
        ;;
    MSYS* | MINGW* )
        msys=true
        ;;
    NONSTOP* )
        nonstop=true
        ;;
esac

# Determine the Java command to use to start the JVM
init

# For Cygwin or MSYS, switch paths to Windows format before running java
if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$GRADLE_WRAPPER_JAR" )
    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Add Windows-specific settings
    if [ "$cygwin" = "true" ] ; then
        GRADLE_OPTS="$GRADLE_OPTS \"-Dorg.gradle.appname=$APP_BASE_NAME\""
    fi
else
    CLASSPATH="$GRADLE_WRAPPER_JAR"
fi

# Load properties from gradle.properties if exists
if [ -f "$APP_HOME/gradle.properties" ]; then
    # shellcheck source=/dev/null
    . "$APP_HOME/gradle.properties"
fi

# Escape application args
save () {
    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
    echo " "
}
APP_ARGS=$( save "$@" )

# Execute Gradle
exec "$JAVACMD" $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \
    "-Dorg.gradle.appname=$APP_BASE_NAME" \
    -classpath "$CLASSPATH" \
    org.gradle.wrapper.GradleWrapperMain \
    "$@"